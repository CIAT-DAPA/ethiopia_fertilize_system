# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Devops Fertalizer

on:
  push:
    branches: [ "pre_deploy" ]
    tags:
    - 'v*'
  pull_request:
    branches: [ "pre_deploy" ]


permissions:
  contents: read

jobs:

# ------- START API PROCCESS -------- #

  TestApi:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Add conda to PATH
      run: |
        echo "##vso[task.prependpath]$CONDA/bin"
    - name: Create Anaconda environment
      run: |
        conda create --yes --quiet --name fertalizer python=3.9
    - name: Active Anaconda environment
      run: |
        eval "$(conda shell.bash hook)"
        conda activate fertalizer
    - name: Install Libgdal
      run: |
        sudo add-apt-repository ppa:ubuntugis/ppa
        sudo apt-get update
        sudo apt-get install libgdal-dev
    - name: Install Gdal
      run: |
        sudo apt-get install gdal-bin
        export CPLUS_INCLUDE_PATH=/usr/include/gdal
        export C_INCLUDE_PATH=/usr/include/gdal
        pip install GDAL==3.4.3
    - name: Install Rasterio
      run: |
        pip install -U pip
        pip install pyproject-toml
        pip install rasterio
    - name: Install dependencies
      run: |
        pip install -r ./src/webapi/requirements.txt
    - name: Run Tests
      run: |
        python -m unittest discover -s ./src/webapi/unit_tests/ -p 'test_*.py'


# ------- END API PROCCESS -------- #    



# ------- START FRONT PROCCESS -------- #
  
    
  TestFront:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install packages
        run: npm --prefix ./src/agroadvisory install
      - name: Run tests
        run: npm --prefix ./src/agroadvisory test

# ------- END FRONT PROCCESS -------- #

# ------- START MERGE PROCCESS -------- #

  MergeMasterApi:
    needs: [TestApi, TestFront]
    name: Merge Pre deploy with Master
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Merge pre_deploy -> master
        uses: devmasx/merge-branch@master
        with:
          type: now
          head_to_merge: ${{ github.ref }}
          target_branch: devops
          github_token: ${{ github.token }}

# ------- END MERGE PROCCESS -------- #

# ------- START RELEASE PROCCESS -------- #

  PostRelease:
    needs: MergeMasterApi
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - uses: actions/setup-node@v3
      with:
          node-version: 18
    # API Zip
    - name: Zip artifact for deployment
      run: zip releaseApi.zip ./src/webapi/* -r
    # Front Zip
    - name: Install packages
      run: npm --prefix ./src/agroadvisory install
    - name: Run build
      run: npm --prefix ./src/agroadvisory run build
    - name: Zip artifact front for deployment
      run: zip releaseFront.zip ./src/agroadvisory/build/* -r
    # Upload Artifacts
    - name: Upload Api artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: WebApi
        path: releaseApi.zip
    - name: Upload Front artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: Frontend
        path: releaseFront.zip
    - name: Minor version for each merge
      id: taggerDryRun
      uses: anothrNick/github-tag-action@1.55.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        DRY_RUN: true
        DEFAULT_BUMP: patch
    # Create release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: ${{ steps.taggerDryRun.outputs.new_tag }}
        release_name: Release ${{ steps.taggerDryRun.outputs.new_tag }}
        body_path: ./body.md
        draft: false
        prerelease: false
    # Upload Assets to release
    - name: Upload Release Asset API
      id: upload-api-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./releaseApi.zip
        asset_name: releaseApi.zip
        asset_content_type: application/zip
    - name: Upload Release Asset Front
      id: upload-front-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./releaseFront.zip
        asset_name: releaseFront.zip
        asset_content_type: application/zip

# ------- END RELEASE PROCCESS -------- #
      
