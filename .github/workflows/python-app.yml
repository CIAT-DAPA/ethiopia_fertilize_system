# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "pre_deploy" ]
    tags:
    - 'v*'
  pull_request:
    branches: [ "pre_deploy" ]


env:
  VERSION_NAME: 0.0.1

permissions:
  contents: read

jobs:
  Test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Add conda to PATH
      run: |
        echo "##vso[task.prependpath]$CONDA/bin"
    - name: Create Anaconda environment
      run: |
        conda create --yes --quiet --name fertalizer python=3.9
    - name: Active Anaconda environment
      run: |
        eval "$(conda shell.bash hook)"
        conda activate fertalizer
    - name: Install Libgdal
      run: |
        sudo add-apt-repository ppa:ubuntugis/ppa
        sudo apt-get update
        sudo apt-get install libgdal-dev
    - name: Install Gdal
      run: |
        sudo apt-get install gdal-bin
        export CPLUS_INCLUDE_PATH=/usr/include/gdal
        export C_INCLUDE_PATH=/usr/include/gdal
        pip install GDAL==3.4.3
    - name: Install Rasterio
      run: |
        pip install -U pip
        pip install pyproject-toml
        pip install rasterio
    - name: Install dependencies
      run: |
        pip install -r ./src/webapi/requirements.txt
    - name: Run Tests
      run: |
        python -m unittest discover -s ./src/webapi/unit_tests/ -p 'test_*.py'


  MergeMaster:
    needs: Test
    name: Merge Pre deploy with Master
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Merge pre_deploy -> master
        uses: devmasx/merge-branch@master
        with:
          type: now
          head_to_merge: ${{ github.ref }}
          target_branch: devops
          github_token: ${{ github.token }}


  PostRelease:
    needs: MergeMaster
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
    - uses: actions/checkout@v3
    - name: Zip artifact for deployment
      run: zip release.zip ./src/webapi/* -r

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: WebApi
        path: release.zip
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag_name: $VERSION_NAME
        release_name: Release $VERSION_NAME
        body_path: ./body.md
        draft: false
        prerelease: false
        owner: ${github.event.commits[0].author.name}
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./release.zip
        asset_name: release.zip
        asset_content_type: application/zip
        
  
    
